var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:  https://40923152.github.io/cd2024/ \n 網誌:  https://40923152.github.io/cd2024/blog \n 簡報:  https://40923152.github.io/cd2024/reveal \n 倉儲:\xa0 https://github.com/40923152/cd2024 \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'W1', 'text': '建立Github帳號跟Replit和倉儲、部落格 \n \n', 'tags': '', 'url': 'W1.html'}, {'title': 'W2', 'text': '在分組倉儲中新增個人子模組6 \n', 'tags': '', 'url': 'W2.html'}, {'title': 'W3', 'text': '組員們間討論 論文中翻英 \n 每個人所負責的部份 \n \n', 'tags': '', 'url': 'W3.html'}, {'title': 'W4', 'text': '在Replit裡將做好的中翻英論文push到Github \n', 'tags': '', 'url': 'W4.html'}, {'title': 'W5', 'text': '把之前的教學影片平均分配 \n 將字幕加上影片中 \n \n \n', 'tags': '', 'url': 'W5.html'}, {'title': 'W6', 'text': '字幕影片: \n \n', 'tags': '', 'url': 'W6.html'}, {'title': 'W7', 'text': '期中自評報告影片: \n \n', 'tags': '', 'url': 'W7.html'}, {'title': 'w10', 'text': '', 'tags': '', 'url': 'w10.html'}, {'title': '任務一', 'text': '', 'tags': '', 'url': '任務一.html'}, {'title': '建立各班學員的倉儲、網站與分組連結', 'text': '網址連結 \n', 'tags': '', 'url': '建立各班學員的倉儲、網站與分組連結.html'}, {'title': '任務二', 'text': '', 'tags': '', 'url': '任務二.html'}, {'title': '鋼球平衡台 PID 控制與模擬', 'text': '請下載 cd2024_ball_balancing_platform_control_ref.7z, 閱讀後請將摘要內容放入個人與分組網誌中. 各篇論文之摘要及結論: \n 論文一 2D Ball Balancer Control using QUARC \n 摘要:本實驗旨在設計一個控制系統以穩定2D球平衡器上的球，並將其定位到預定位置。使用比例-積分-微分（PID）控制設計控制系統，涵蓋動態建模、傳遞函數獲取、PV補償器設計及PID補償器設計。模擬和實驗驗證了控制器的有效性，探討了設置點權重和積分器防風機制等技術。 \n 結論:該實驗成功設計並實施了控制系統，使2D球平衡器穩定控制，驗證了PV和PID控制器的有效性。 \n 論文二 A real time control system for balancing a ball on a platform with FPGA parallel implementation \n 摘要:本文提出了一種基於PID控制器的解決方案，以提高實時控制平台上球位置的準確性。通過在FPGA上實現並行計算的PID控制器，提高了球位置的調節精度，並通過自然模擬驗證了效果。該設計可用於高速、多參數的實時控制系統。 \n 結論:本文通過FPGA上的並行PID控制器，實現了實時平台上球位置的高精度控制，驗證了其有效性。 \n 論文三 Ball_on_the_plate_balancing_control_system \n 摘要:本研究提出了一種新的方法，通過使用FPGA上的PID控制器並行計算來提高實時平衡球在平台上位置的準確性。為此，我們開發了球平衡平台的傳遞函數，合成了PID控制器，並設計了其在FPGA上的實現。通過自然模擬證實了該方法的有效性和精確度的提升。 \n 結論:本文展示了一種新的實時控制系統方法，通過FPGA並行計算實現PID控制器，提高了控制系統的效率和準確性。該設計適用於多參數的高速對象實時控制。 \n 論文四 Construction and theoretical study \n 摘要:本論文探討動態系統中的控制理論及其應用，通過構建和分析一個球體平衡平台。研究重點在於設計一個滿足系統需求的比例-積分-微分（PID）控制器，並比較理論模擬與物理構建結果的差異，從而確定控制系統在穩定不穩定或半穩定系統時的局限性。 \n 結論:使用線性控制設計球體平衡平台能滿足部分系統需求，但在靜態誤差上存在局限性。 \n 論文五 Design and Implementation a Ball Balancing System for Control Theory Course \n 摘要:本項目旨在開發一個通過微控制器和相關控制算法調整梁的角度來保持球在梁上平衡的系統。通過閉環實時控制系統和精心調整的參數，系統能夠最小化球實際位置與設定位置之間的誤差。設計了三個原型進行對比，最終系統結合了伺服電機、距離傳感器、微控制器和機械平台，適用於本科生學習和理解PID控制的基本原理，並通過編程實現控制算法。 \n 結論:球平衡系統是一個經濟實惠的教育工具，通過傳感器和微控制器平台，學生可以應用所學知識，實踐閉環反饋理論，開發和演示相關的反饋控制算法。 \n 論文六 Simulation_and_Experimental_Study_of_Ball_Position \n 摘要:本研究旨在開發一種利用微控制器和相關控制算法，通過實時感測反饋調整梁的角度來保持球平衡的系統。該系統使用閉環實時控制來最小化實際位置與預期位置之間的誤差。此教育工具有助於學生學習並應用比例-積分-微分（PID）控制原理。 \n 結論:本研究展示了球平衡系統作為教育工具的有效性，有助於學生理解和應用閉環反饋控制理論。 \n', 'tags': '', 'url': '鋼球平衡台 PID 控制與模擬.html'}, {'title': '任務三', 'text': '', 'tags': '', 'url': '任務三.html'}, {'title': '鋼球平衡台零組件繪圖', 'text': '根據老師所提供的下載檔,安裝NX1872至電腦或隨身碟,以及平衡台零件尺寸,進行繪製。 \n', 'tags': '', 'url': '鋼球平衡台零組件繪圖.html'}, {'title': 'w11', 'text': '鋼球平衡台零件一 繪製過程 \n \n', 'tags': '', 'url': 'w11.html'}, {'title': 'w17', 'text': '', 'tags': '', 'url': 'w17.html'}, {'title': '項目一', 'text': '機器人本體 \n \n', 'tags': '', 'url': '項目一.html'}, {'title': '項目二', 'text': '組合 \n \n py檔 \n \n', 'tags': '', 'url': '項目二.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};